{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Joke","textCenter","textAlign","this","props","data","error","message","items","style","setup","punchline","React","Component","ShareJoke","shareAsTweet","bind","joke","length","window","open","encodeURIComponent","icon","faTwitter","size","color","onClick","App","state","isLoaded","getQuote","fetch","then","res","json","result","setState","className","justifySelf","marginLeft","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"4RAOMA,E,uKAEF,IAAMC,EAAW,CAACC,UAAW,UAE7B,OAAIC,KAAKC,MAAMC,KAAKC,MACX,uCAAaH,KAAKC,MAAMC,KAAKC,MAAMC,SAChCJ,KAAKC,MAAMC,KAAKG,MAIxB,6BACI,wBAAIC,MAAOR,GAAaE,KAAKC,MAAMC,KAAKG,MAAME,OAC9C,wBAAID,MAAOR,GAAaE,KAAKC,MAAMC,KAAKG,MAAMG,YAL7C,+C,GAPMC,IAAMC,WAmBnBC,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,2DAMiB,IAA3Bb,KAAKC,MAAMa,KAAKC,QACjBC,OAAOC,KAAP,+DAAoEC,mBAAmBlB,KAAKC,MAAMa,KAAKP,OAAvG,YAAiHW,mBAAmBlB,KAAKC,MAAMa,KAAKN,YAAa,Y,+BAKvK,OACE,kBAAC,IAAD,CAAiBW,KAAMC,IAAWC,KAAK,KAAKf,MAAO,CAACgB,MAAM,WAAYC,QAASvB,KAAKY,mB,GAdlEH,IAAMC,WAkEfc,E,kDA9CX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACCwB,MAAQ,CACXtB,MAAO,KACPuB,UAAU,EACVrB,MAAO,IAEX,EAAKsB,SAAW,EAAKA,SAASd,KAAd,gBAPD,E,uDASP,IAAD,OAEPe,MADY,sDAEPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVP,UAAU,EACVrB,MAAO2B,OAIf,SAAC7B,GACG,EAAK8B,SAAS,CACVP,UAAU,EACVvB,e,+BAKhB,OACI,yBAAK+B,UAAU,QACb,yBAAKA,UAAU,QACb,qDAEF,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAAMhC,KAAMF,KAAKyB,SAErB,yBAAKS,UAAU,OACb,kBAAC,EAAD,CAAWpB,KAAMd,KAAKyB,MAAMpB,MAAOC,MAAO,CAAC6B,YAAa,WACxD,4BAAQD,UAAU,aAAaX,QAASvB,KAAK2B,SAAUrB,MAAO,CAAC6B,YAAa,MAAOC,WAAY,SAA/F,kB,GAxCE3B,IAAMC,WCjCJ2B,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMC,c","file":"static/js/main.5c175195.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// get our fontawesome imports\nimport  {faTwitter} from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nclass Joke extends React.Component {\n    render() {\n    const textCenter={textAlign: \"center\"};\n    // this.props.data.items = null;\n    if (this.props.data.error) {\n      return <div>Error: {this.props.data.error.message}</div>;\n    } else if (!this.props.data.items) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n            <h2 style={textCenter}>{this.props.data.items.setup}</h2>\n            <h2 style={textCenter}>{this.props.data.items.punchline}</h2>\n        </div>\n      );\n    }\n  }\n}\n\nclass ShareJoke extends React.Component {\n  constructor(props) {\n    super(props);\n    this.shareAsTweet = this.shareAsTweet.bind(this);\n  }\n\n  shareAsTweet() {\n       if (this.props.joke.length !== 0) {\n          window.open(`https://twitter.com/intent/tweet?hashtags=jokes&text=${encodeURIComponent(this.props.joke.setup)} ${encodeURIComponent(this.props.joke.punchline)}`,'_blank');\n       }\n    \n  }\n  render() {\n    return(\n      <FontAwesomeIcon icon={faTwitter} size=\"2x\" style={{color:\"#1da1f2\"}} onClick={this.shareAsTweet}/>\n    );\n  }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n          this.state = {\n            error: null,\n            isLoaded: false,\n            items: [],\n        };\n        this.getQuote = this.getQuote.bind(this);\n    }\n    getQuote() {\n        const url = \"https://official-joke-api.appspot.com/jokes/random\";\n        fetch(url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                })\n    }\n    render() {\n        return (\n            <div className=\"wrap\">\n              <div className=\"head\">\n                <h3>Radom Joke Generator</h3>\n              </div>\n              <div className=\"data\">\n                  <Joke data={this.state}/>\n              </div>\n              <div className=\"gen\">\n                <ShareJoke joke={this.state.items} style={{justifySelf: \"start\"}}/>\n                <button className=\"btn-getjok\" onClick={this.getQuote} style={{justifySelf: \"end\", marginLeft: \"auto\"}}>Get Joke</button>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}